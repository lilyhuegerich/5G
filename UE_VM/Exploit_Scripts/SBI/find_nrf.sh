ips=(10.0.8.1 10.0.3.1 10.0.4.1 10.0.5.1 10.0.9.1 10.0.10.1)
interface="enp0s3"
while getopts "i:n:" opt; do
        case $opt in
                n)
                        OPTIND=$((2))
                        while [[ $OPTIND -le $# ]] && [[ "${!OPTIND}" != -* ]]; do
                                ips+=("${!OPTIND}")
                                OPTIND=$((OPTIND +1))
                        done
                        ;;
                i)
                        interface="$OPTARG"
                        ;;
                \?)
                        echo "Invalid option: -$OPTARG, valid options are -n (list of nf ip addresses to test) and -i (interface to use default enp0s3)" >&2
                        exit 1
                        ;;
        esac
done

if [[ "$interface" == "enp0s3" ]]; then
	nghttp_call="nghttp http://"
else
	ip=`/home/lily/5G/SHARED/Tools/get_ip_of_ue.sh $interface`
	if [ $? -eq 1 ]; then
		echo $interface " not a valid interface, valid is either enp0s3 or a ue address or name."
		exit 1
	fi
	cd /home/lily/UERANSIM/build
	nghttp_call="./nr-binder $ip nghttp http://"
fi

uri=":7777/nnrf-nfm/v1/nf-instances"

UGreen='\033[0;32m'
UYellow='\033[0;33m'
color_off='\033[0m'

invalid_list=("Unknown" "Invalid" "ERROR")
for IP in "${ips[@]}"
do
	to_call="$nghttp_call$IP$uri"
	echo -e "$color_off" $to_call
	result=`$to_call`
	nrf=1
	for check in "${invalid_list[@]}"; do
		invalid=`echo "$result" | grep "$check"`
       		if [ $? -eq 0 ]; then
			nrf=0
		fi
	done
	if [ -z "${result}" ]; then
		nrf=0
	fi
	if [ $nrf -eq 0 ]; then
		nrf=0
		echo -e "$UYellow" $IP "most likely not an NRF."
	else
		echo -e "$UGreen" "$IP is an NRF!"
		echo $result
		final_result=$result
	fi
	#echo $result
done

#echo -e "$color_off" $final_result
exit 0
