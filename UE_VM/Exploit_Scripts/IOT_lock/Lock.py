
from scapy.all import sendp, send, Packet, hexdump, Ether, BitField, IP, ICMP, bind_layers, BitEnumField, get_if_addr, srp, sniff
from threading import Thread, Event

import os
import sys
from time import sleep

from Lock_data import Lock_server_ip, Lock_ue
lock_iface=Lock_ue
src_ip=get_if_addr(lock_iface)


class Key(Packet):
    name="Key"
    fields_desc= [BitEnumField(name="Access", default=2, size=2, enum={0:"DENIED", 1: "GRANTED", 2: "REQUEST"}), BitField(name="User_ID", default=0, size=6), BitField(name="User_Password", default=0, size=8)]

bind_layers(IP, Key, proto=2)
bind_layers(Ether, IP, type=0x800)
lock_state=0
def handle_packet(pkt):
    global lock_state
    if not IP in pkt:
        return
    if not Key in pkt:
        return
    if not pkt[IP].dst==src_ip:
        return
    else:
        if pkt[Key].Access==1:
            lock_state=1
            print("\n******************Unlocked******************")
            sleep (3)
            print("\n*******************Locked*******************")
            lock_state=0
        else:
            print("\nDenied.")

def sniffer(on):
    sniff(iface=lock_iface, prn=handle_packet,stop_filter= lambda x:on.is_set())

on=Event()
thread=Thread(target=sniffer, args=(on,))
thread.start()
while True:
    if lock_state==1:
        continue
    try:
        user_id = input("\nEnter User ID.")
        password= input("\nEnter Password for user "+str(user_id)+ ".")
        src_ip=get_if_addr(lock_iface)
        try:
            pkt= IP(dst=Lock_server_ip,src=src_ip, ttl=64, proto=2) / Key(User_ID=int(user_id), User_Password=int(password))
        except:
            print("Password and User ID must be ints.")
            continue
        #pkt.show()
        sendp(pkt, iface=lock_iface)
        sleep(1)
    except KeyboardInterrupt:
        on.set()
        print("Closing.")
        break
