
from scapy.all import sendp, send, Packet, hexdump, Ether, BitField, IP, ICMP, bind_layers, BitEnumField, get_if_addr, srp, sniff

import os
import sys
from time import sleep

from Lock_data import Lock_server_ip, Lock_ue
lock_iface=Lock_ue
src_ip=get_if_addr(lock_iface)


class Key(Packet):
    name="Key"
    fields_desc= [BitEnumField(name="Access", default=2, size=2, enum={0:"DENIED", 1: "GRANTED", 2: "REQUEST"}), BitField(name="User_ID", default=0, size=6), BitField(name="User_Password", default=0, size=8)]

bind_layers(IP, Key, proto=2)
bind_layers(Ether, IP, type=0x800)
response=0
def handle_packet(pkt):
    global response
    if not IP in pkt:
        return
    if not Key in pkt:
        return
    if not pkt[IP].dst==src_ip:
        return
    else:
        response=1
        if pkt[Key].Access==1:
            print("******************Unlocked******************")
            sleep (3)
            print("*******************Locked*******************")
        else:
            print("Denied.")

while True:
    try:
        user_id = input("Door Locked: Enter User ID.")
        password= input("Enter Password for user "+str(user_id)+ ".")
        try:
            pkt= IP(dst=Lock_server_ip,src=src_ip, ttl=64, proto=2) / Key(User_ID=int(user_id), User_Password=int(password))
        except:
            print("Password and User ID must be ints.")
            continue
        #pkt.show()
        sendp(pkt, iface=lock_iface)
        response=0
        while response==0:
            sniff(prn=handle_packet)
    except KeyboardInterrupt:
        print("Closing.")
        break
