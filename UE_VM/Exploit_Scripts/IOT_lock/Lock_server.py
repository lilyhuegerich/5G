
from scapy.all import sendp, send, Packet, hexdump, Ether, BitField, IP, ICMP, bind_layers, BitEnumField, get_if_addr, sniff
from threading import Thread, Event
import os
import sys
import time
import logging
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from Lock_data import Lock_server_ip, Lock_ue, server_sniff_iface
lock_iface=Lock_ue
src_ip=get_if_addr(lock_iface)
resp_ip=IP(src=Lock_server_ip, dst=src_ip)

class Key(Packet):
    name="Key"
    fields_desc= [BitEnumField(name="Access", default=2, size=2, enum={0:"DENIED", 1: "GRANTED", 2: "REQUEST"}), BitField(name="User_ID", default=0, size=6), BitField(name="User_Password", default=0, size=8)]

bind_layers(IP, Key, proto=2)
bind_layers(Ether, IP, type=0x800)

tottally_safe_passwords={0:1,
                        1:2,
                        3:6,
                        4:0,
                        2:0}

on=Event()

def handle_packet(pkt):
    #pkt.show()
    if not pkt[IP].dst==Lock_server_ip:
        return
    else:
        ID=pkt[IP][Key].User_ID
        password=pkt[IP][Key].User_Password
        print("User: ", ID, "Password: ",password)
        key=pkt[IP][Key]
        if "10.4" in pkt[IP].src:
            src_ip=pkt[IP].src
            resp_ip=IP(src=Lock_server_ip, dst=src_ip)
        if not ID in tottally_safe_passwords:
            print("Not a user.")
            key.Access=0
        elif tottally_safe_passwords[ID]==password:
            print("OK.")
            key.Access=1
        else:
            print("Incorrect.")
            key.Access=0
        resp=resp_ip/key
        send(resp)

def sniffer(on):
    #print (Lock_server_ip)
    sniff(iface=server_sniff_iface, prn=handle_packet, filter="ip", stop_filter= lambda x:on.is_set())

    print ("Ended.")

thread=Thread(target=sniffer, args=(on,))
thread.start()

while True:

    try:
        time.sleep(1)
    except KeyboardInterrupt:
        on.set()
        break
thread.join()
