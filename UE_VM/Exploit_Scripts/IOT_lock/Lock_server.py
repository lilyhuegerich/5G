
from scapy.all import sendp, send, Packet, hexdump, Ether, BitField, IP, ICMP, bind_layers, BitEnumField, get_if_addr, sniff
import threading
import os
import sys
import time

from Lock_data import Lock_server_ip

class Key(Packet):
    name="Key"
    fields_desc= [BitEnumField(name="Access", default=2, size=2, enum={0:"DENIED", 1: "GRANTED", 2: "REQUEST"}), BitField(name="User_ID", default=0, size=6), BitField(name="User_Password", default=0, size=8)]

bind_layers(IP, Key, proto=2)
bind_layers(Ether, IP, type=0x800)

tottally_safe_passwords={0:1,
                        1:2,
                        3:6,
                        4:0,
                        2:0}

On=True

def handle_packet(pkt):
    print(pkt)
    if not IP in pkt:
        return

    if not IP.dst==Lock_server_ip:
        return

    else:
        print(pkt)


def sniffer():

    while On:
        try:
            sniff(prn=handle_packet, count=1)
        except KeyboardInterrupt:
            print("Closeing.")
            break

    print ("Ended.")

thread=threading.Thread(target=sniffer)
thread.start()

while True:

    try:
        time.sleep(1)
    except KeyboardInterrupt:
        On=False
        break
thread.join()
